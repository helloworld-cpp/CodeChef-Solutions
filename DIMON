# include <bits/stdc++.h>
# define ll long long int
# define mod (1000*1000*1000+7)
using namespace std;

/* Iterative Function to calculate (x^y)%p 
in O(log y) */
ll power(ll x, ll y, ll p) 
{ 
	ll res = 1;	 // Initialize result 

	x = x % p; // Update x if it is more than or 
				// equal to p 

	while (y > 0) 
	{ 
		// If y is odd, multiply x with result 
		if (y & 1) 
			res = (res*x) % p; 

		// y must be even now 
		y = y>>1; // y = y/2 
		x = (x*x) % p; 
	} 
	return res; 
} 

// Returns n^(-1) mod p 
ll modInverse(ll n, ll p) 
{ 
	return power(n, p-2, p); 
} 

// Returns nCr % p using Fermat's little 
// theorem. 
ll nCrModPFermat(ll n, ll r, ll p) 
{ 
// Base case 
if (r==0) 
	return 1; 

	// Fill factorial array so that we 
	// can find all factorial of r, n 
	// and n-r 
	ll fac[n+1]; 
	fac[0] = 1; 
	for (ll i=1 ; i<=n; i++) 
		fac[i] = fac[i-1]*i%p; 

	return (fac[n]* modInverse(fac[r], p) % p * 
			modInverse(fac[n-r], p) % p) % p; 
} 



		 






int main(){
   ll m,n,i,temp,sum=0; cin>>m>>n;
        for(i=0;i<n;i++){
            cin>>temp;
            sum+=temp;
        }
    temp=m-sum;
    if (temp<0)
    {
        cout << 0 <<endl ;
        return 0;
    }
    //ll num=1;
   // ll d1=1;
    // ll d2=1;
    cout<<nCrModPFermat(temp+n-1, n-1, mod)<<endl; 
    /*for(i=1;i<=(temp+n-1);i++){
        num=(num*i)%mod;
    }
    for(i=1;i<=(n-1);i++){
        d1=(d1*i)%mod;
    }
    for(i=1;i<=(temp);i++){
        d2=(d2*i)%mod;
    }
    ll res=num/(d1*d2);*/
    //cout<<res<<endl;
    
        
    
}